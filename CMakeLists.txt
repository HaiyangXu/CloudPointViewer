project(SfMOpenCV)
cmake_minimum_required(VERSION 2.8)
find_package(PCL REQUIRED)


add_definitions(${PCL_DEFINITIONS})
############################################################
#CMake with  Qt library
#
#
#
#
############################################################
#


#To use this CMakeLists.txt in Qt Projects ,you must be sure
#to have a floder structure as below:
###############################################
#    ./include      //headers without Q_OBJECT
#    ./src          //sources
###############################################
#    ./moc_include  //headers with Q_OBJECT ,and All Classes using Q_OBJECT should make claims in a header.
#    ./ui  	    // .ui files
#    ./res          // .rcc files
###############################################
cmake_minimum_required(VERSION 2.8)


#set up Qt library 
#
FIND_PACKAGE(Qt4 REQUIRED)
SET(QT_USE_QTMAIN TRUE)  #Use QTMAIN in windows ,set it before include QT_USE_FILE
SET(QT_USE_QTOPENGL TRUE)
SET(QT_USE_QTUITOOLS TRUE) #CONFIG += uitools ,use QUILoader
INCLUDE(${QT_USE_FILE})
MESSAGE(STATUS "QT_USE_FILE: " ${QT_USE_FILE})


ADD_DEFINITIONS(${QT_DEFINITIONS})



aux_source_directory(./src  SRC_SOURCES_)
file(GLOB SRC_MOC_INCLUDE_ ./moc_include/*.h)
file(GLOB SRC_FORMS_ ./ui/*.ui)
SET(SRC_RESOURCES_     ./res/res.qrc  )


#set up variables that will be processed by QT

SET(QT_CMAKE_HEADERS ${SRC_MOC_INCLUDE_})
SET(QT_CMAKE_FORMS ${SRC_FORMS_})
SET(QT_CMAKE_RESOURCES ${SRC_RESOURCES_})

#set up variables SRC_WITHOUT_QT

SET(SRC_WITHOUT_QT ${SRC_INCLUDE_} ${SRC_SOURCES_} )

SET(CMAKE_DEBUG TRUE)
IF(CMAKE_DEBUG)
    MESSAGE(STATUS "SRC_MOC_INCLUDE_: " ${SRC_MOC_INCLUDE_})
    MESSAGE(STATUS "SRC_FORMS_: " ${SRC_FORMS_})
    MESSAGE(STATUS "SRC_RESOURCES_: " ${SRC_RESOURCES_})
    MESSAGE(STATUS "SRC_INCLUDE_: " ${SRC_INCLUDE_})
    MESSAGE(STATUS "SRC_SOURCES_: " ${SRC_SOURCES_})
ENDIF(CMAKE_DEBUG)


############################################################

#variables: 
#/	QT_CMAKE_HEADERS_MOC 
#	QT_CMAKE_FORMS_HEADERS 
#	QT_CMAKE_RESOURCES_RCC 
#holds the source files generated by QT
#	LIST_OF_SOURCES  holds the source file

#let QT generate the C++ codes
QT4_WRAP_CPP(QT_CMAKE_HEADERS_MOC ${QT_CMAKE_HEADERS})
QT4_WRAP_UI(QT_CMAKE_UI_HEADERS ${QT_CMAKE_FORMS})
QT4_ADD_RESOURCES(QT_CMAKE_RESOURCES_RCC ${QT_CMAKE_RESOURCES})

#INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/moc_include)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
SET(SOURCE_FILES  ${QT_CMAKE_HEADERS_MOC} ${QT_CMAKE_UI_HEADERS} ${QT_CMAKE_RESOURCES_RCC} ${SRC_WITHOUT_QT} ${SRC_MOC_INCLUDE_}  )


#set up source group
#source_group(name [REGULAR_EXPRESSION regex] [FILES src1 src2 ...])
#source_group(include REGULAR_EXPRESSION   .*\.h              FILES ${SOURCE_FILES})
#source_group(src     REGULAR_EXPRESSION   .*\.cpp              FILES ${SOURCE_FILES})

#set build directory
#add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])



find_package(PCL REQUIRED)
add_definitions(${PCL_DEFINITIONS})
include_directories(${PCL_INCLUDE_DIRS})
link_directories(${PCL_LIBRARY_DIRS})




ADD_EXECUTABLE(SfMUi   ${SOURCE_FILES} )



SET(LIBRARY_FILES ${QT_LIBRARIES} QVTK 	${OpenCV_LIBS}
        ${PCL_LIBRARIES} )

MESSAGE(STATUS "Build Type: " ${CMAKE_BUILD_TYPE})
TARGET_LINK_LIBRARIES(SfMUi ${LIBRARY_FILES} )

MESSAGE(STATUS "Link Lib: " ${LIBRARY_FILES})
